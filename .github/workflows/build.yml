name: Build and Release App

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        arch: [amd64, arm64]
        exclude:
          # Windows ARM64 needs special handling
          - os: windows-latest
            arch: arm64
          # Linux ARM64 builds might need specific runners
          - os: ubuntu-latest
            arch: arm64

    runs-on: ${{ matrix.os }}
    env:
      CGO_CFLAGS_ALLOW: "-mfma|-mf16c"
      NODE_OPTIONS: "--max-old-space-size=4096"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Create GitHub Token File
        run: |
          node -e "require('fs').writeFileSync('credentials/github-token.txt', process.env.REPOSITORY_TOKEN)"
        env:
          REPOSITORY_TOKEN: "${{ secrets.REPOSITORY_TOKEN }}"

      # - name: Create Google OAuth Credentials File
      #   run: |
      #     node -e "require('fs').writeFileSync('credentials/google-credentials.json', process.env.GOOGLE_CREDENTIALS)"
      #   env:
      #     GOOGLE_CREDENTIALS: "${{ secrets.GOOGLE_CREDENTIALS }}"

      - name: Set App Version
        run: |
          echo "${{ github.ref_name }}" > version.txt

      - name: Create API Keys file
        run: |
          cd internal/transcribe/wait.ai
          node keys.js ${{ secrets.WAIT_API_KEYS }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install Wails and garble
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw cmake nsis -y

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsdl2-dev libwebkit2gtk-4.1-dev

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install sdl2 cmake gcc

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          wails build -platform windows/${{ matrix.arch }} -nsis -webview2 embed
          mv build/bin/*-installer.exe build/bin/${{ github.event.repository.name }}-windows-${{ matrix.arch }}-installer.exe
          Get-ChildItem -Path build/bin -Exclude *-installer.exe | Rename-Item -NewName "${{ github.event.repository.name }}-windows-${{ matrix.arch }}.exe"

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          wails build -platform linux/${{ matrix.arch }} -tags webkit2_41 -webview2 embed
          cd build/bin
          tar czf ${{ github.event.repository.name }}-linux-${{ matrix.arch }}.tar.gz *

      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: |
          wails build -platform darwin/${{ matrix.arch }} -webview2 embed
          # Create zip archive
          cd build/bin
          zip -r ${{ github.event.repository.name }}-darwin-${{ matrix.arch }}.zip *

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}-build
          path: build/bin/*
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
