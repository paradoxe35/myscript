name: Build and Release App

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    name: Build for all platforms
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Continue with other builds even if one fails
      matrix:
        include:
          # Docker builds for Windows and Linux
          - os: ubuntu-latest
            build-type: docker
            arch: amd64
          # macOS builds
          - os: macos-latest
            build-type: native
            arch: amd64
          - os: macos-latest
            build-type: native
            arch: arm64

    env:
      CGO_CFLAGS_ALLOW: "-mfma|-mf16c"
      NODE_OPTIONS: "--max-old-space-size=4096"

    steps:
      - uses: actions/checkout@v4

      # Common setup steps
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Create GitHub Token File
        run: |
          node -e "require('fs').writeFileSync('credentials/github-token.txt', process.env.REPOSITORY_TOKEN)"
        env:
          REPOSITORY_TOKEN: "${{ secrets.REPOSITORY_TOKEN }}"

      - name: Create Google OAuth Credentials File
        run: |
          node -e "require('fs').writeFileSync('credentials/google-credentials.json', process.env.GOOGLE_CREDENTIALS)"
        env:
          GOOGLE_CREDENTIALS: "${{ secrets.GOOGLE_CREDENTIALS }}"

      - name: Set App Version
        run: |
          echo "${{ github.ref_name }}" > version.txt

      - name: Create API Keys file
        run: |
          cd internal/transcribe/wait.ai
          node keys.js ${{ secrets.WAIT_API_KEYS }}

      # Docker-specific steps
      - name: Set up Docker Buildx
        if: matrix.build-type == 'docker'
        uses: docker/setup-buildx-action@v3

      - name: Build with Docker
        if: matrix.build-type == 'docker'
        run: |
          docker build \
            --build-arg BUILDARCH=${{ matrix.arch }} \
            --build-arg APP_NAME=${{ github.event.repository.name }} \
            -t builder .

          # Create artifacts directory
          mkdir -p build/bin

          # Run container and copy artifacts
          docker run --rm -v ${{ github.workspace }}/build/bin:/artifacts builder

      # Add this step before "Process Linux Artifacts"
      - name: Create .deb Package with nFPM
        if: matrix.build-type == 'docker'
        run: |
          # Ensure target directory exists
          mkdir -p build/bin

          # Create .deb package using nFPM Docker image
          docker run --rm \
            -v "$PWD:/tmp" \
            -w /tmp \
            goreleaser/nfpm package \
            --config /tmp/nfpm.yaml \
            --target /tmp/build/bin \
            --packager deb

      - name: Process .deb Package Artifacts
        if: matrix.build-type == 'docker'
        run: |
          shopt -s nullglob

          for file in build/bin/*.deb; do
            mv "$file" "build/bin/${{ github.event.repository.name }}-linux-${{ matrix.arch }}.deb"
          done

      - name: Process Windows Artifacts
        if: matrix.build-type == 'docker'
        run: |
          shopt -s nullglob

          # Rename installer files (if any)
          for file in build/bin/*-installer.exe; do
            mv "$file" "build/bin/${{ github.event.repository.name }}-windows-${{ matrix.arch }}-installer.exe"
          done

          # Rename other .exe files
          for file in build/bin/*.exe; do
            [[ "$file" == *"-installer.exe" ]] && continue  # Skip installer files
            mv "$file" "build/bin/${{ github.event.repository.name }}-windows-${{ matrix.arch }}.exe"
          done

      - name: Process Linux Artifacts
        if: matrix.build-type == 'docker'
        run: |
          if [ -f "build/bin/${{ github.event.repository.name }}-amd64" ] || [ -f "build/bin/${{ github.event.repository.name }}" ]; then
            cd build/bin
            # Create a temporary directory for Linux files
            mkdir linux_files
            # Move Linux binaries to temp directory (Exclude .exe, .zip, and .deb files from tarball)
            find . -type f -not -name "*.exe" -not -name "*.zip" -not -name "*.deb" -exec mv {} linux_files/ \;
            # Create tarball from Linux files only
            cd linux_files
            tar czf ../${{ github.event.repository.name }}-linux-${{ matrix.arch }}.tar.gz *
            cd ..
            # Clean up the temporary directory
            rm -rf linux_files
          fi

      # macOS-specific steps
      - name: Set up Go
        if: matrix.build-type == 'native'
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install Wails
        if: matrix.build-type == 'native'
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install macOS Dependencies
        if: matrix.build-type == 'native'
        run: |
          brew update
          brew install sdl2 cmake gcc

      - name: Build macOS
        if: matrix.build-type == 'native'
        run: |
          wails build -platform darwin/${{ matrix.arch }} -skipbindings
          cd build/bin
          zip -r ${{ github.event.repository.name }}-darwin-${{ matrix.arch }}.zip *

      # Common upload step
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-build
          path: build/bin/*
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.deb
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
