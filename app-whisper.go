package main

import (
	"log/slog"
	"myscript/internal/transcribe/structs"
	"myscript/internal/transcribe/whisper"
	local_whisper "myscript/internal/transcribe/whisper/local"
	"myscript/internal/utils"

	"github.com/wailsapp/wails/v2/pkg/runtime"
)

// --- Whisper ---

func (a *App) GetWhisperLanguages() []structs.Language {
	return whisper.GetWhisperLanguages()
}

// --- Local Whisper ---

func (a *App) GetBestLocalWhisperModel() string {
	availableRAM, err := utils.GetAvailableRAM()
	if err != nil {
		return whisper.GetLocalWhisperModels()[0].Name
	}

	return whisper.SuggestWhisperModel(availableRAM)
}

func (a *App) GetLocalWhisperModels() []whisper.WhisperModel {
	return whisper.GetLocalWhisperModels()
}

func (a *App) ExistsLocalWhisperModel(model local_whisper.LocalWhisperModel) bool {
	return local_whisper.ModelExists(model)
}

func (a *App) DownloadLocalWhisperModels(models []local_whisper.LocalWhisperModel) error {
	downloadProgress := make(chan local_whisper.DownloadProgress)

	go func() {
		if err := local_whisper.DownloadModels(models, downloadProgress); err != nil {
			slog.Error("Error downloading models", "error", err)
			runtime.EventsEmit(a.ctx, "on-whisper-model-download-error", err.Error())
		} else {
			runtime.EventsEmit(a.ctx, "on-whisper-model-download-success")
		}
	}()

	for progress := range downloadProgress {
		slog.Info("Downloading model progress: %s (%d%%)", progress.Name, progress.Size)
		runtime.EventsEmit(a.ctx, "on-whisper-model-download-progress", progress)
	}

	return nil
}

// This is just a helper function, local_whisper.DownloadProgress struct is generated by Wails
func (a *App) GetLocalWhisperDownloadProgress() local_whisper.DownloadProgress {
	return local_whisper.DownloadProgress{}
}

func (a *App) AreSomeLocalWhisperModelsDownloading() bool {
	return local_whisper.AreSomeModelsDownloading()
}

func (a *App) IsLocalWhisperModelDownloading(model local_whisper.LocalWhisperModel) bool {
	return local_whisper.IsModelDownloading(model)
}
